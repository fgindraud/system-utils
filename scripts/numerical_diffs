#!/usr/bin/env python

"""
Show numerical differences between arrays of numbers in text files.
Text files are interpreted as an array of numbers and other text, whitespace separated.
For each field present in the two files, the numerical difference is printed to stdout.

Field with no difference show the value itself in default shell color.
If a difference is present, show the 'absolute', 'relative', or 'absolute|relative' difference depending on flags.
The difference is colored (green if >= 0, red otherwise).
Output is tab separated.

Usage:
    numerical_diffs [options] <file1> <file2>

Options:
    -h, --help                   Show this help
    -a,--abs                     Show absolute differences [default]
    -r,--relative                Show relative differences
    -t,--trim                    Trim non common text
    --absolute-threshold=FLOAT   Color if |absolute_diff| >= FLOAT
    --relative-threshold=FLOAT   Color if |relative_diff| >= FLOAT
    -s,--show-text               Show text differences
"""

from docopt import docopt
import itertools

arguments = docopt (__doc__)

show_absolute = arguments['--abs'] or not arguments['--relative']
show_relative = arguments['--relative']
show_text_differences = arguments['--show-text']

try:
    abs_thr = float (arguments['--absolute-threshold'])
except:
    abs_thr = 0.

try:
    rel_thr = float (arguments['--relative-threshold'])
except:
    rel_thr = 0.

def color_condition (a, r):
    return abs (a) >= abs_thr and abs (r) >= rel_thr

def colored (text, color_code = 0):
    # Must be called for each column value, to ensure the same amount of special characters are inserted everywhere
    # This prevents column size mismatch for column (1)
    return str.format ('\x1b[{:02}m{}\x1b[0m', color_code, text)

def is_float (text):
    try:
        float (text)
        return True
    except ValueError:
        return False

def numerical_diff_text (ref_num, other_num):
    abs_diff = other_num - ref_num
    rel_diff = abs_diff / ref_num

    if show_absolute and show_relative:
        text = str.format ('{}|{}', abs_diff, rel_diff)
    elif show_absolute:
        text = str (abs_diff)
    elif show_relative:
        text = str (rel_diff)

    if not color_condition (abs_diff, rel_diff):
        color_code = 0 # Default
    elif abs_diff >= 0:
        color_code = 32 # Green
    else:
        color_code = 31 # Red
    return colored (text, color_code)

def text_diff_text (ref, other):
    if show_text_differences:
        text = str.format ('{}|{}', ref, other)
    else:
        text = '*' * max (len (ref), len (other))

    color_code = 34 # blue
    return colored (text, color_code)

def compared_lines (line_elements):
    def output_element (ref, other):
        # colored () is used with default color to insert special codes
        # this lets utilities like column(1) properly pad text
        if ref is None:
            return colored (other)
        elif other is None:
            return colored (ref)
        elif ref == other:
            return colored (ref)
        elif is_float (ref) and is_float (other):
            return numerical_diff_text (float (ref), float (other))
        else:
            return text_diff_text (ref, other)

    return '\t'.join (map (lambda pair: output_element (pair[0], pair[1]), line_elements))


if arguments['--trim']:
    zipper = zip
else:
    zipper = itertools.zip_longest

with open (arguments['<file1>']) as file1:
    with open (arguments['<file2>']) as file2:
        for (line1, line2) in zipper (file1.readlines (), file2.readlines ()):
            # lines are '\n' terminated
            if line1 is None:
                print ('\t'.join (map (colored, line2.split ())))
            elif line2 is None:
                print ('\t'.join (map (colored, line1.split ())))
            else:
                print (compared_lines (zipper (line1.split (), line2.split ())))
